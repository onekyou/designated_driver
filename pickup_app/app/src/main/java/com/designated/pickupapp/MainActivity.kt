package com.designated.pickupapp

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.Box
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.ui.Modifier
import androidx.compose.ui.Alignment
import androidx.core.content.ContextCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import android.provider.Settings
import android.text.TextUtils
import android.content.ComponentName
import com.designated.pickupapp.ui.home.HomeScreen
import com.designated.pickupapp.data.Constants
import com.designated.pickupapp.ui.home.HomeViewModel
import com.designated.pickupapp.ui.login.LoginScreen
import com.designated.pickupapp.ui.signup.SignUpScreen
import com.designated.pickupapp.ui.theme.PickupAppTheme
import dagger.hilt.android.AndroidEntryPoint
import androidx.compose.runtime.*
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser

/**
 * ÌîΩÏóÖÏï± Î©îÏù∏ Ïï°Ìã∞ÎπÑÌã∞ (Android 15 Ìò∏Ìôò)
 * - ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Í¥ÄÎ¶¨
 * - Í∂åÌïú Ï≤òÎ¶¨
 */
@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    
    private var homeViewModel: HomeViewModel? = null
    
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        
        Log.e("MainActivity", "üö®üö®üö® ÌîΩÏóÖÏï± MainActivity ÏãúÏûë üö®üö®üö®")
        Log.e("MainActivity", "Android Î≤ÑÏ†Ñ: ${android.os.Build.VERSION.SDK_INT}")
        
        
        setContent {
            PickupAppTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val navController = rememberNavController()
                    
                    // SharedPreferencesÎ•º ÌÜµÌïú Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ (Firebase Auth ÏÉÅÌÉúÏôÄ Î¨¥Í¥ÄÌïòÍ≤å)
                    val sharedPrefs = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)
                    val isAutoLoginEnabled = sharedPrefs.getBoolean(Constants.PREF_AUTO_LOGIN, false)
                    val savedRegionId = sharedPrefs.getString(Constants.PREF_KEY_REGION_ID, null)
                    val savedOfficeId = sharedPrefs.getString(Constants.PREF_KEY_OFFICE_ID, null)
                    val savedEmail = sharedPrefs.getString(Constants.PREF_EMAIL, null)
                    val savedDriverId = sharedPrefs.getString(Constants.PREF_KEY_DRIVER_ID, null)
                    
                    // ÏûêÎèô Î°úÍ∑∏Ïù∏Ïù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÍ≥† ÌïÑÏöîÌïú Ï†ïÎ≥¥Í∞Ä Î™®Îëê ÏûàÏúºÎ©¥ Ìôà ÌôîÎ©¥ÏúºÎ°ú
                    val startDestination = if (isAutoLoginEnabled && 
                                           !savedRegionId.isNullOrBlank() && 
                                           !savedOfficeId.isNullOrBlank() && 
                                           !savedDriverId.isNullOrBlank() &&
                                           savedRegionId.length > 2 &&
                                           savedOfficeId.length > 2 &&
                                           savedDriverId.length > 10) { // UIDÎäî ÏµúÏÜå 10Ïûê Ïù¥ÏÉÅ
                        Log.e("MainActivity", "‚úÖ ÏûêÎèô Î°úÍ∑∏Ïù∏ ÌôúÏÑ±Ìôî - Ìôà ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô")
                        Log.e("MainActivity", "  - Region: $savedRegionId")
                        Log.e("MainActivity", "  - Office: $savedOfficeId") 
                        Log.e("MainActivity", "  - Driver: $savedDriverId")
                        "home/$savedRegionId/$savedOfficeId/$savedDriverId"
                    } else {
                        Log.e("MainActivity", "‚ùå Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô")
                        Log.e("MainActivity", "  - AutoLogin: $isAutoLoginEnabled")
                        Log.e("MainActivity", "  - Region: $savedRegionId (len: ${savedRegionId?.length ?: 0})")
                        Log.e("MainActivity", "  - Office: $savedOfficeId (len: ${savedOfficeId?.length ?: 0})")
                        Log.e("MainActivity", "  - Driver: $savedDriverId (len: ${savedDriverId?.length ?: 0})")
                        "login"
                    }
                    
                    NavHost(
                        navController = navController,
                        startDestination = startDestination
                    ) {
                        composable("login") {
                            LoginScreen(
                                onNavigateToSignUp = {
                                    navController.navigate("signup")
                                },
                                onLoginSuccess = { regionId: String, officeId: String, driverId: String ->
                                    navController.navigate("home/$regionId/$officeId/$driverId") {
                                        popUpTo("login") { inclusive = true }
                                    }
                                },
                                onNavigateToPasswordReset = {
                                    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Í∏∞Îä• (Ìñ•ÌõÑ Íµ¨ÌòÑ)
                                }
                            )
                        }
                        
                        composable("signup") {
                            SignUpScreen(
                                onNavigateBack = {
                                    navController.popBackStack()
                                },
                                onSignUpSuccess = {
                                    // ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                                    navController.navigate("login") {
                                        popUpTo("signup") { inclusive = true }
                                    }
                                }
                            )
                        }
                        
                        composable("home/{regionId}/{officeId}/{driverId}") { backStackEntry ->
                            val regionId = backStackEntry.arguments?.getString("regionId") ?: ""
                            val officeId = backStackEntry.arguments?.getString("officeId") ?: ""
                            val driverId = backStackEntry.arguments?.getString("driverId") ?: ""
                            
                            // ÌååÎùºÎØ∏ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                            if (regionId.isBlank() || officeId.isBlank() || driverId.isBlank()) {
                                Log.e("MainActivity", "‚ùå ÏûòÎ™ªÎêú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌååÎùºÎØ∏ÌÑ∞ Í∞êÏßÄ")
                                Log.e("MainActivity", "regionId='$regionId', officeId='$officeId', driverId='$driverId'")
                                // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
                                navController.navigate("login") {
                                    popUpTo(0) { inclusive = true }
                                }
                                return@composable
                            }
                            
                            HomeScreen(
                                regionId = regionId,
                                officeId = officeId,
                                driverId = driverId,
                                onLogout = {
                                    navController.navigate("login") {
                                        popUpTo(0) { inclusive = true }
                                    }
                                },
                            )
                        }
                        
                    }
                }
            }
        }
    }
    
    /**
     * HomeViewModel ÏÑ§Ï†ï (HomeScreenÏóêÏÑú Ìò∏Ï∂ú)
     */
    fun setHomeViewModel(viewModel: HomeViewModel) {
        this.homeViewModel = viewModel
    }
    
    
    override fun onDestroy() {
        super.onDestroy()
    }
    
    
}