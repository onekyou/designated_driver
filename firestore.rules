rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the currently authenticated user's UID matches the provided userId
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if the currently authenticated user is an admin of the specified office
    function isOfficeAdmin(regionId, officeId) {
      let adminPath = /databases/$(database)/documents/admins/$(request.auth.uid);
      return isAuthenticated()
             && exists(adminPath)
             && get(adminPath).data.associatedRegionId == regionId
             && get(adminPath).data.associatedOfficeId == officeId;
    }
    
    // Checks if the currently authenticated user is an admin (any office)
    function isAnyAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Top-Level Collections ---

    match /admins/{adminId} { // adminId is the document ID, should be user's UID
      allow read, write: if isOwner(adminId);
      // 🔥 Firebase Functions가 FCM 토큰 조회를 위해 읽기 접근 허용
      allow read: if request.auth == null; // Firebase Functions (서버 사이드)
    }

    match /pending_drivers/{userId} { // userId is the document ID, should be user's UID
      allow create: if isOwner(userId);
      allow read: if isAnyAdmin() || isOwner(userId);
      allow delete: if isAnyAdmin();
    }

    // --- Collection Group for Drivers to find their own document ---
    // ★★★ 중요 수정: 기사가 로그인 후 자신의 정보를 가져올 수 있도록 수정 ★★★
    // DriverViewModel이 이 규칙을 사용하여 authUid로 기사 문서를 찾습니다.
    match /{path=**}/designated_drivers/{docId} { // docId is the document ID of the driver's record
      allow read: if isAuthenticated() && resource.data.authUid == request.auth.uid;
    }
    
    // ★★★ 임시 디버깅용 - 로그인된 사용자는 모든 기사 문서 읽기 허용 ★★★
    match /{path=**}/designated_drivers/{docId} {
      allow read: if isAuthenticated();
    }
    
    // ★★★ 픽업 기사 collectionGroup 쿼리 지원 ★★★
    match /{path=**}/pickup_drivers/{docId} {
      allow read: if isAuthenticated() && resource.data.authUid == request.auth.uid;
    }

    // --- Nested Collections under Regions/Offices ---
    match /regions/{regionId}/offices/{officeId} {
      allow read: if isAuthenticated(); // Allow basic office/region info reading

      match /designated_drivers/{driverDocId} {
        // 읽기(read): 관리자이거나, 기사 본인인 경우 허용
        allow read: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
        
        // 쓰기(write): 관리자이거나, 기사 본인인 경우 허용
        allow write: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
      }

      match /calls/{callId} {
        // 해당 사무실의 관리자 또는 배정된 기사(assignedDriverId 필드로 확인)는 특정 콜 정보를 가져오거나 쿼리할 수 있습니다.
        // get과 list 규칙을 read로 통합하여 권한 충돌 문제를 해결합니다.
        allow read: if
            isOfficeAdmin(regionId, officeId) ||
            (isAuthenticated() && resource.data.assignedDriverId == request.auth.uid) ||
            isAuthenticated(); // ★★★ 임시 디버깅용 - 로그인된 사용자는 모든 콜 읽기 허용 ★★★

        // 콜 생성: 누구나 콜을 생성할 수 있습니다 (콜 디텍터 앱용).
        allow create: if true;

        // 콜 삭제: 사무실 관리자 또는 공유콜을 취소하는 기사가 가능합니다.
        allow delete: if 
          isOfficeAdmin(regionId, officeId) ||
          // 기사가 자신에게 배정된 공유콜을 취소(삭제)하는 경우
          (isAuthenticated() && 
           resource.data.assignedDriverId == request.auth.uid && 
           resource.data.callType == "SHARED");

        // 콜 업데이트 (상태 머신):
        // 관리자 또는 배정된 기사만 업데이트 가능
        allow update: if
          isOfficeAdmin(regionId, officeId) ||
          (
            // 업데이트 요청자가 해당 콜에 배정된 기사인지 확인
            isAuthenticated() && resource.data.assignedDriverId == request.auth.uid &&
            (
              // 상태 전환 규칙 (필요시 각 상태별 필드 변경 규칙 추가)
              (resource.data.status == "ASSIGNED" && request.resource.data.status == "ACCEPTED") ||
              (resource.data.status == "ACCEPTED" && request.resource.data.status == "IN_PROGRESS") ||
              (resource.data.status == "IN_PROGRESS" && request.resource.data.status == "AWAITING_SETTLEMENT") ||
              (resource.data.status == "AWAITING_SETTLEMENT" && request.resource.data.status == "COMPLETED") ||
              // 기사가 운행 취소할 때: ACCEPTED → HOLD 허용
              (resource.data.status == "ACCEPTED" && request.resource.data.status == "HOLD") ||
              // 기사가 공유콜을 취소할 때: ASSIGNED/ACCEPTED → CANCELLED_BY_DRIVER 허용
              ((resource.data.status == "ASSIGNED" || resource.data.status == "ACCEPTED") && 
               request.resource.data.status == "CANCELLED_BY_DRIVER" && 
               resource.data.callType == "SHARED")
            )
          ) ||
          // 공유콜 취소 시 원본 사무실 콜을 원래 상태로 복구 허용
          // 기사가 공유콜을 취소할 때 원본 사무실의 콜을 복구할 수 있도록 허용
          (isAuthenticated() && 
           resource.data.callType == "SHARED" && 
           request.resource.data.status == "SHARED" &&
           request.resource.data.status == "WAITING" &&
           request.resource.data.cancelReason != null);
      }

      // ✅ 포인트(balance) 문서 규칙 – 오직 사무실 관리자 읽기 가능, 서버(Functions)만 쓰기
      match /points/{pointsId} {
        allow read: if isOfficeAdmin(regionId, officeId);
        // Cloud Functions(서버 사이드)만 잔액/충전 변경 허용
        allow write: if request.auth == null;
      }

      // =============================
      //  픽업 기사 컬렉션 (pickup_drivers)
      //  • 관리자와 본인 읽기/쓰기 허용
      //  • collectionGroup 쿼리 지원
      // =============================
      match /pickup_drivers/{driverDocId} {
        // 읽기(read): 관리자이거나, 기사 본인인 경우 허용
        allow read: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
        
        // 쓰기(write): 관리자이거나, 기사 본인인 경우 허용
        allow write: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
      }

      // =============================
      //  일일 정산(dailySettlements) & 세션 문서
      //  • 관리자 읽기 허용
      //  • Cloud Functions(서버) 또는 관리자만 쓰기 허용
      // =============================
      match /dailySettlements/{dateId} {
        allow read:  if isOfficeAdmin(regionId, officeId);
        allow write: if request.auth == null || isOfficeAdmin(regionId, officeId);

        // 서브컬렉션: sessions
        match /sessions/{sessionId} {
          allow read:  if isOfficeAdmin(regionId, officeId);
          allow write: if request.auth == null || isOfficeAdmin(regionId, officeId);
        }
      }
    }

    // 공유 콜 규칙 – 관리자만 접근 가능, 기사는 내부콜만 처리
    match /shared_calls/{sharedCallId} {
      // 관리자만 조회 가능
      allow read: if isAnyAdmin();

      // 공유 콜 생성: 관리자만 가능 (source 사무실)
      allow create: if isAnyAdmin();

      /*
       * 공유 콜 상태 전환 허용:
       * 1) OPEN → CLAIMED: 관리자가 콜 수락
       * 2) CLAIMED → COMPLETED: Cloud Functions가 운행 완료 시 처리
       * 3) CLAIMED → OPEN: Cloud Functions가 기사 취소 시 처리
       */
      allow update: if
        // OPEN → CLAIMED (관리자가 수락)
        (isAnyAdmin() &&
         resource.data.status == "OPEN" &&
         request.resource.data.status == "CLAIMED") ||
        // Cloud Functions가 상태 변경 처리
        (request.auth == null);

      // 클라이언트 측 삭제 금지 - 서버만 가능
      allow delete: if request.auth == null;
    }

    // 포인트 거래 내역 컬렉션
    match /point_transactions/{transactionId} {
      // 관리자만 포인트 거래 내역 조회 가능
      allow read: if isAnyAdmin();
      // Cloud Functions(서버)만 생성/수정 가능
      allow write: if request.auth == null;
    }
  }
}