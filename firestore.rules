rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the currently authenticated user's UID matches the provided userId
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if the currently authenticated user is an admin of the specified office
    function isOfficeAdmin(regionId, officeId) {
      let adminPath = /databases/$(database)/documents/admins/$(request.auth.uid);
      return isAuthenticated()
             && exists(adminPath)
             && get(adminPath).data.associatedRegionId == regionId
             && get(adminPath).data.associatedOfficeId == officeId;
    }
    
    // Checks if the currently authenticated user is an admin (any office)
    function isAnyAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Top-Level Collections ---

    match /admins/{adminId} { // adminId is the document ID, should be user's UID
      allow read, write: if isOwner(adminId);
      // 🔥 Firebase Functions가 FCM 토큰 조회를 위해 읽기 접근 허용
      allow read: if request.auth == null; // Firebase Functions (서버 사이드)
    }

    match /pending_drivers/{userId} { // userId is the document ID, should be user's UID
      allow create: if isOwner(userId);
      allow read: if isAnyAdmin() || isOwner(userId);
      allow delete: if isAnyAdmin();
    }

    // --- Collection Group for Drivers to find their own document ---
    // ★★★ 중요 수정: 기사가 로그인 후 자신의 정보를 가져올 수 있도록 수정 ★★★
    // DriverViewModel이 이 규칙을 사용하여 authUid로 기사 문서를 찾습니다.
    match /{path=**}/designated_drivers/{docId} { // docId is the document ID of the driver's record
      allow read: if isAuthenticated() && resource.data.authUid == request.auth.uid;
    }
    
    // (임시 전체 허용 규칙 제거됨)

    // --- Nested Collections under Regions/Offices ---
    // 지역(Document) 및 사무실(Document) 기본 정보는 로그인 없이 읽기 허용
    match /regions/{regionId} {
      allow read: if true;

      match /offices/{officeId} {
        allow read: if true; // 사무실 이름·설정 등 기본 정보

      match /designated_drivers/{driverDocId} {
        // 읽기(read): 관리자이거나, 기사 본인인 경우 허용
        allow read: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
        
        // 쓰기(write): 관리자이거나, 기사 본인인 경우 허용
        allow write: if isOfficeAdmin(regionId, officeId) || (isAuthenticated() && resource.data.authUid == request.auth.uid);
      }

      match /calls/{callId} {
        // 해당 사무실의 관리자 또는 배정된 기사(assignedDriverId 필드로 확인)는 특정 콜 정보를 가져오거나 쿼리할 수 있습니다.
        // get과 list 규칙을 read로 통합하여 권한 충돌 문제를 해결합니다.
        allow read: if
            isOfficeAdmin(regionId, officeId) ||
            (isAuthenticated() && resource.data.assignedDriverId == request.auth.uid);

        // 콜 생성: 누구나 콜을 생성할 수 있습니다 (콜 디텍터 앱용).
        allow create: if true;

        // 콜 삭제: 사무실 관리자만 가능합니다.
        allow delete: if isOfficeAdmin(regionId, officeId);

        // 콜 업데이트 (상태 머신):
        // 관리자 또는 배정된 기사만 업데이트 가능
        allow update: if
          isOfficeAdmin(regionId, officeId) ||
          (
            // 업데이트 요청자가 해당 콜에 배정된 기사인지 확인
            isAuthenticated() && resource.data.assignedDriverId == request.auth.uid &&
            (
              // 상태 전환 규칙 (필요시 각 상태별 필드 변경 규칙 추가)
              (resource.data.status == "ASSIGNED" && request.resource.data.status == "ACCEPTED") ||
              (resource.data.status == "ACCEPTED" && request.resource.data.status == "IN_PROGRESS") ||
              (resource.data.status == "IN_PROGRESS" && request.resource.data.status == "AWAITING_SETTLEMENT") ||
              (resource.data.status == "AWAITING_SETTLEMENT" && request.resource.data.status == "COMPLETED")
            )
          );
      }

        // ✅ 포인트(balance) 문서 규칙 – 오직 사무실 관리자 읽기 가능, 서버(Functions)만 쓰기
        match /points/{pointsId} {
          allow read: if isOfficeAdmin(regionId, officeId);
          // Cloud Functions(서버 사이드)만 잔액/충전 변경 허용
          allow write: if request.auth == null;
        }

        // 🗂 credits 컬렉션 – 고객별 외상 잔액
        match /credits/{customerId} {
          // 읽기/쓰기: 사무실 관리자, 또는 Cloud Functions (request.auth == null)
          allow read, write: if isOfficeAdmin(regionId, officeId) || request.auth == null;
        }

        // 🗂 settlements 컬렉션 – 정산 문서
        match /settlements/{settlementId} {
          // 읽기: 사무실 관리자, 해당 콜의 기사, 또는 다른 사무실 관리자(전체 열람 권한)
          allow read: if isOfficeAdmin(regionId, officeId) || isAnyAdmin() || (isAuthenticated() && resource.data.driverId == request.auth.uid);

          /* 쓰기 규칙
             - Cloud Functions: 최초 생성(PENDING)·SETTLED 처리에 사용 → request.auth == null
             - 사무실 관리자: settlementStatus 를 SETTLED 로 변경할 때만 허용
          */
          // 간소화된 쓰기 규칙: 사무실 관리자는 모든 정산 작업 가능
          allow write: if request.auth == null || isOfficeAdmin(regionId, officeId) || (
            // 드라이버가 자신의 정산을 SETTLED로 변경 (외상/이체 제외)
            isAuthenticated() &&
            resource.data.driverId == request.auth.uid &&
            resource.data.settlementStatus == "PENDING" &&
            request.resource.data.settlementStatus == "SETTLED" &&
            resource.data.paymentMethod != "외상" &&
            resource.data.paymentMethod != "이체"
          );
        }

        // 🗓 dailySettlements 컬렉션 – 업무 마감 집계 카드
        match /dailySettlements/{dateId} {
          // 읽기: 사무실 관리자만
          allow read:  if isOfficeAdmin(regionId, officeId);

          // 쓰기: Cloud Functions(서버) 또는 사무실 관리자 로컬 처리(batch)
          allow write: if request.auth == null || isOfficeAdmin(regionId, officeId);

          // ── sessions 하위 컬렉션: 마감 버튼별 세션 카드 ──
          match /sessions/{sessionId} {
            allow read:  if isOfficeAdmin(regionId, officeId);
            allow write: if request.auth == null || isOfficeAdmin(regionId, officeId);
          }
        }

        // 🪙 point_transactions – 포인트 거래 내역 (오피스 하위 컬렉션)
        match /point_transactions/{txId} {
          // 읽기: 해당 사무실 관리자만
          allow read: if isOfficeAdmin(regionId, officeId);
          // 쓰기: Cloud Functions(서버) 전용
          allow write: if request.auth == null;
        }
      }
    }

    // 공유 콜 규칙 – OPEN ➔ CLAIMED 1회만 허용
    match /shared_calls/{sharedCallId} {
      // 관리자라면 조회 가능
      allow read: if isAnyAdmin();

      // 공유 콜 생성: 관리자만 가능 (source 사무실)
      allow create: if isAnyAdmin();

      /*
       * OPEN 상태의 공유 콜을 CLAIMED 상태로 전환할 때만 허용
       *   – resource.data.status      == "OPEN"  (현재)
       *   – request.resource.data.status == "CLAIMED" (요청)
       *   – 최초 한 번만 (claimedOfficeId 가 null → 값 입력)
       */
      allow update: if
        isAnyAdmin() &&
        resource.data.status == "OPEN" &&
        request.resource.data.status == "CLAIMED" &&
        (
          !("claimedOfficeId" in resource.data) || resource.data.claimedOfficeId == null
        ) &&
        request.resource.data.claimedOfficeId != null;

      // 클라이언트 측 삭제 금지
      allow delete: if false;
    }

    // 포인트 거래 내역 – 관리자 읽기, 서버(Function) 쓰기 전용
    match /point_transactions/{txId} {
      allow read: if isAnyAdmin();
      allow write: if request.auth == null;
    }
  }
}